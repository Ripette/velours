<!DOCTYPE html>
<html>
  <head>
    <title>Velours</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag 'application', media: 'all', 'data-turbo-track': 'reload' %>
    <link rel="manifest" href="/manifest.json">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <%= javascript_importmap_tags %>

    <script src="https://cdn.onesignal.com/sdks/web/v16/OneSignalSDK.page.js" defer></script>
    <script>
      window.OneSignalDeferred = window.OneSignalDeferred || [];
      OneSignalDeferred.push(async function(OneSignal) {
        await OneSignal.init({
          appId: "12a609ee-318e-4423-8e34-062dc14bb6e9",
          safari_web_id: "web.onesignal.auto.570f8921-edd7-49b2-93d5-7301d9209087",
          notifyButton: {
            enable: true,
          },
        });
      });
    </script>
  </head>

  <body>
    <%= render 'layouts/header' %>

    <div id="flash-container" class="flash-container">
      <% flash.each do |type, message| %>
        <div class="flash-message <%= type %>">
          <%= message %>
        </div>
      <% end %>
    </div>

    <main class="container">
      <%= yield %>
    </main>

    <div id="modal-backdrop" class="modal-backdrop"></div>

    <script>
      document.addEventListener('turbo:load', () => {
        // --- Flash message handler ---
        const flashMessages = document.querySelectorAll('.flash-message');

        if (flashMessages.length > 0) {
          flashMessages.forEach((message, index) => {
            // Stagger the animation for multiple messages
            setTimeout(() => {
              message.classList.add('show');
            }, index * 100);

            // Hide after 2.5 seconds (giving a bit more time for the animation)
            setTimeout(() => {
              message.classList.remove('show');
              // Optional: remove from DOM after transition
              setTimeout(() => {
                if (message.parentElement) {
                  message.parentElement.removeChild(message);
                }
              }, 500); // Wait for fade-out transition
            }, 2500 + (index * 100));
          });
        }

        // --- Modal handler ---
        const modal = document.getElementById('scenario-modal');
        const backdrop = document.getElementById('modal-backdrop');

        // Listen for form submission inside the modal
        const scenarioForm = document.getElementById('passion-scenario-form');
        if (scenarioForm) {
          scenarioForm.addEventListener('submit', function() {
            closeModal();
          });
        }
      });
    </script>
  </body>
</html>
